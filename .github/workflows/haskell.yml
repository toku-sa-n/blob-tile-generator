name: Haskell CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:

    strategy:
      matrix:
        os: ['ubuntu-latest', 'windows-latest']
        ghc: ['8.10.7', '9.0.2', '9.2.2']

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2

    - uses: haskell/actions/setup@v1
      id: haskell_setup
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: '3.6.0.0'

    - name: Cache
      uses: actions/cache@v2
      env:
        cache-name: cache-cabal
      with:
        path: |
          ~/.cabal/packages
          ~/.cabal/store
          dist-newstyle
        key: ${{ runner.os }}-${{ hashFiles('cabal.project.freeze') }}-${{ github.sha }}
        restore-keys: ${{ runner.os }}-${{ hashFiles('cabal.project.freeze') }}

    - name: Update Cabal
      run: cabal update

    - name: Build
      run: cabal build --enable-tests --enable-benchmarks all -j

    - name: Run tests
      run: cabal test all -j

  format_and_lint:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - uses: haskell/actions/setup@v1
      with:
        ghc-version: '8.10.7'
        cabal-version: '3.6.0.0'

    - name: Cache
      uses: actions/cache@v2
      env:
        cache-name: cache-cabal
      with:
        path: |
          ~/.cabal/packages
          ~/.cabal/store
          dist-newstyle
        key: ${{ runner.os }}-${{ hashFiles('cabal.project.freeze') }}-${{ github.sha }}
        restore-keys: ${{ runner.os }}-${{ hashFiles('cabal.project.freeze') }}

    - name: Update the PATH environment variable
      run: echo "$HOME/.cabal/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install moreutils

        cabal update -j

        # See https://tokuchan3515.hatenablog.com/entry/2022/03/26/133158 why we separate `cabal install`s.
        cabal install weeder -j -z
        cabal install hindent -j -z
        cabal install stylish-haskell -j -z

    - name: Generate `cabal.project.local` for `weeder`
      run: "echo \"package * \n  ghc-options: -fwrite-ide-info\" > cabal.project.local"

    - name: Detect unused lines
      run: |
        cabal clean # This is necessary to run `weeder` correctly. See https://hackage.haskell.org/package/weeder.
        weeder

    - name: Set up HLint
      uses: haskell/actions/hlint-setup@v1

    - name: Run HLint
      uses: haskell/actions/hlint-run@v1
      with:
        path: '["src/", "tests/", "app/"]'
        fail-on: warning

    - name: Check format
      run: ./formatter.sh --check


